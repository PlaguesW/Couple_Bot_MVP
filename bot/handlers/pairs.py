from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from keyboards.inline import main_menu, back_to_menu_button

router = Router()

class PairStates(StatesGroup):
    waiting_for_join_code = State()

@router.callback_query(F.data == "create_pair")
async def create_pair_handler(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—ã"""
    user = await db.get_user(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–∞—Ä—ã
    existing_pair = await db.get_user_pair(user['id'])
    if existing_pair:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞!")
        return
    
    if len(invite_code) != 6:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞!\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    
    success = await db.join_pair(user['id'], invite_code)
    
    if success:
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
        pair = await db.get_user_pair(user['id'])
        partner_id = await db.get_partner_id(user['id'])
        partner = await db.get_user_by_id(partner_id)
        
        await message.answer(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø–∞—Ä–µ!\n\n"
            f"–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä: {partner['name']} üíï\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
            reply_markup=main_menu()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        try:
            from main import bot
            await bot.send_message(
                partner['telegram_id'],
                f"üéâ {user['name']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π –ø–∞—Ä–µ!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–∏–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–µ! üíï",
                reply_markup=main_menu()
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    else:
        await message.answer(
            "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–∞—Ä–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É."
        )

@router.callback_query(F.data == "pair_info")
async def pair_info_handler(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ"""
    user = await db.get_user(callback.from_user.id)
    pair = await db.get_user_pair(user['id'])
    
    if not pair or not pair['user2_id']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—ã!", show_alert=True)
        return
    
    partner_id = await db.get_partner_id(user['id'])
    partner = await db.get_user_by_id(partner_id)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—ã
    history = await db.get_date_history(pair['id'], limit=100)
    completed_dates = len([h for h in history if h['status'] == 'accepted'])
    pending_proposals = await db.get_pending_proposals(pair['id'])
    
    pair_date = pair['created_at'].strftime("%d.%m.%Y")
    
    await callback.message.edit_text(
        f"üë´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ\n\n"
        f"üíï –ü–∞—Ä—Ç–Ω–µ—Ä: {partner['name']}\n"
        f"üìÖ –ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {pair_date}\n"
        f"üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π: {completed_dates}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(pending_proposals)}\n"
        f"üîó –ö–æ–¥ –ø–∞—Ä—ã: `{pair['invite_code']}`",
        parse_mode="Markdown",
        reply_markup=back_to_menu_button()
    )
    
    await callback.answer()
    existing_pair = await db.get_user_pair(user['id'])
    if existing_pair:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
    invite_code = await db.create_pair(user['id'])
    
    await callback.message.edit_text(
        f"‚úÖ –ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–í–∞—à –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{invite_code}`\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É.\n"
        "–ü–∞—Ä—Ç–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"
        f"`/join {invite_code}`\n\n"
        "–ò–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä–µ' "
        "–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥.",
        parse_mode="Markdown",
        reply_markup=back_to_menu_button()
    )
    
    await callback.answer("–ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! üéâ")

@router.callback_query(F.data == "join_pair")
async def join_pair_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø–∞—Ä–µ"""
    user = await db.get_user(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–∞—Ä—ã
    existing_pair = await db.get_user_pair(user['id'])
    if existing_pair:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞!", show_alert=True)
        return
    
    await state.set_state(PairStates.waiting_for_join_code)
    
    await callback.message.edit_text(
        "üíå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:\n\n"
        "–ö–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ABC123)",
        reply_markup=back_to_menu_button()
    )
    
    await callback.answer()

@router.message(PairStates.waiting_for_join_code)
async def join_pair_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    invite_code = message.text.strip().upper()
    
    if len(invite_code) != 6:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞!\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    
    user = await db.get_user(message.from_user.id)
    success = await db.join_pair(user['id'], invite_code)
    
    if success:
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
        pair = await db.get_user_pair(user['id'])
        partner_id = await db.get_partner_id(user['id'])
        partner = await db.get_user_by_id(partner_id)
        
        await message.answer(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø–∞—Ä–µ!\n\n"
            f"–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä: {partner['name']} üíï\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
            reply_markup=main_menu()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        try:
            from main import bot
            await bot.send_message(
                partner['telegram_id'],
                f"üéâ {user['name']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π –ø–∞—Ä–µ!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–∏–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–µ! üíï",
                reply_markup=main_menu()
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    else:
        await message.answer(
            "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–∞—Ä–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É."
        )

@router.command(Command("join"))
async def join_pair_command(message: Message, state: FSMContext):
    """–ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–∞—Ä–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /join CODE"""
    args = message.text.split()
    
    if len(args) != 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/join –ö–û–î`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/join ABC123`",
            parse_mode="Markdown"
        )
        return
    
    invite_code = args[1].strip().upper()
    user = await db.get_user(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–∞—Ä—ã