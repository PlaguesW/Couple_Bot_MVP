from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import Database
from keyboards.inline import get_pair_keyboard, get_join_keyboard

router = Router()

class PairStates(StatesGroup):
    waiting_for_pair_name = State()
    waiting_for_join_code = State()

@router.message(Command("create_pair"))
async def create_pair_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã"""
    try:
        db = Database()
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.get_user(user_id)
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø–∞—Ä–µ
        existing_pair = await db.get_user_pair(user_id)
        if existing_pair:
            await message.answer("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /leave_pair —á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É.")
            return
        
        await message.answer("üíï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –ø–∞—Ä—ã:")
        await state.set_state(PairStates.waiting_for_pair_name)
        
    except Exception as e:
        logging.error(f"Error in create_pair_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(PairStates.waiting_for_pair_name)
async def process_pair_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—ã"""
    try:
        db = Database()
        user_id = message.from_user.id
        pair_name = message.text.strip()
        
        if len(pair_name) < 2:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if len(pair_name) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
        pair_data = await db.create_pair(user_id, pair_name)
        
        if pair_data:
            pair_id, pair_code = pair_data
            await message.answer(
                f"‚úÖ –ü–∞—Ä–∞ '{pair_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üîê –ö–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: `{pair_code}`\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä–µ.",
                parse_mode="Markdown",
                reply_markup=get_pair_keyboard()
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error in process_pair_name: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(Command("join"))
async def join_pair_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø–∞—Ä–µ"""
    try:
        db = Database()
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.get_user(user_id)
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø–∞—Ä–µ
        existing_pair = await db.get_user_pair(user_id)
        if existing_pair:
            await message.answer("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /leave_pair —á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É.")
            return
        
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–∞—Ä—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:")
        await state.set_state(PairStates.waiting_for_join_code)
        
    except Exception as e:
        logging.error(f"Error in join_pair_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(PairStates.waiting_for_join_code)
async def process_join_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø–∞—Ä–µ"""
    try:
        db = Database()
        user_id = message.from_user.id
        join_code = message.text.strip().upper()
        
        if len(join_code) != 6:
            await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä–µ
        result = await db.join_pair(user_id, join_code)
        
        if result:
            pair_info = await db.get_pair_info(result)
            if pair_info:
                await message.answer(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø–∞—Ä–µ '{pair_info['name']}'!\n\n"
                    f"üíï –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏–π.",
                    reply_markup=get_pair_keyboard()
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                partner_id = await db.get_partner_id(user_id)
                if partner_id:
                    partner_name = message.from_user.first_name or "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä"
                    await message.bot.send_message(
                        partner_id,
                        f"üéâ {partner_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π –ø–∞—Ä–µ!"
                    )
            else:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ.")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–∞—Ä—ã –∏–ª–∏ –ø–∞—Ä–∞ —É–∂–µ –ø–æ–ª–Ω–∞—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error in process_join_code: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ø–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(Command("pair_info"))
async def pair_info_command(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ"""
    try:
        db = Database()
        user_id = message.from_user.id
        
        pair = await db.get_user_pair(user_id)
        if not pair:
            await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_pair –∏–ª–∏ /join")
            return
        
        pair_info = await db.get_pair_info(pair['id'])
        if not pair_info:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ.")
            return
        
        partner_info = await db.get_partner_info(user_id)
        partner_name = "–ù–µ –Ω–∞–π–¥–µ–Ω"
        if partner_info:
            partner_name = partner_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            if partner_info.get('username'):
                partner_name += f" (@{partner_info['username']})"
        
        stats = await db.get_pair_stats(pair['id'])
        
        info_text = (
            f"üíï **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ**\\n\\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {pair_info['name']}\\n"
            f"üë´ –ü–∞—Ä—Ç–Ω–µ—Ä: {partner_name}\\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {pair_info['created_at'].strftime('%d.%m.%Y')}\\n\\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\\n"
            f"üíå –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('messages', 0)}\\n"
            f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–≤–∏–¥–∞–Ω–∏–π: {stats.get('proposals', 0)}\\n"
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats.get('accepted', 0)}"
        )
        
        await message.answer(info_text, parse_mode="MarkdownV2")
        
    except Exception as e:
        logging.error(f"Error in pair_info_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ.")

@router.message(Command("leave_pair"))
async def leave_pair_command(message: Message):
    """–ü–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É"""
    try:
        db = Database()
        user_id = message.from_user.id
        
        pair = await db.get_user_pair(user_id)
        if not pair:
            await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        partner_info = await db.get_partner_info(user_id)
        
        # –ü–æ–∫–∏–¥–∞–µ–º –ø–∞—Ä—É
        success = await db.leave_pair(user_id)
        
        if success:
            await message.answer("‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø–∞—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_pair –∏–ª–∏ /join –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã.")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            if partner_info:
                user_name = message.from_user.first_name or "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä"
                await message.bot.send_message(
                    partner_info['telegram_id'],
                    f"üíî {user_name} –ø–æ–∫–∏–Ω—É–ª –ø–∞—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_pair –∏–ª–∏ /join –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã."
                )
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∏–Ω—É—Ç—å –ø–∞—Ä—É.")
        
    except Exception as e:
        logging.error(f"Error in leave_pair_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∏–Ω—É—Ç—å –ø–∞—Ä—É.")

@router.callback_query(F.data == "pair_info")
async def pair_info_callback(callback: CallbackQuery):
    """Callback –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ"""
    await callback.message.delete()
    await pair_info_command(callback.message)
    await callback.answer()

@router.callback_query(F.data == "leave_pair")
async def leave_pair_callback(callback: CallbackQuery):
    """Callback –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–∞—Ä—ã"""
    await callback.message.delete()
    await leave_pair_command(callback.message)
    await callback.answer()