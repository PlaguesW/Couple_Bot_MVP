from aiogram import Router, F
from aiogram.types import CallbackQuery
from database import db
from keyboards.inline import (
    category_menu, 
    idea_action_keyboard, 
    back_to_menu_button,
    main_menu
)

router = Router()

CATEGORY_MAPPING = {
    'home': '–¥–æ–º',
    'outdoor': '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 
    'entertainment': '–∫—É–ª—å—Ç—É—Ä–∞',
    'food': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω',
    'creative': '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
    'sport': '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    'learning': '–∫—É–ª—å—Ç—É—Ä–∞',
    'romantic': '—Ä–æ–º–∞–Ω—Ç–∏–∫–∞'
}

@router.callback_query(F.data == "get_idea")
async def get_idea_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä—ã
    pair = await db.get_user_pair(user['id'])
    if not pair:
        await callback.message.edit_text(
            "‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—ã' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø–∞—Ä–µ.",
            reply_markup=back_to_menu_button()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–¥–µ–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é:",
        reply_markup=category_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "random_idea")
async def random_idea_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        idea = await db.get_random_idea()
        if not idea:
            await callback.message.edit_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–¥–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=back_to_menu_button()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"üí° <b>{idea['title']}</b>\n\n"
            f"üìù {idea['description']}\n\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {idea['category']}",
            reply_markup=idea_action_keyboard(idea['id']),
            parse_mode='HTML'
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–¥–µ–∏: {e}", show_alert=True)

@router.callback_query(F.data.startswith("category_"))
async def category_idea_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–¥–µ–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    category_key = callback.data.replace("category_", "")
    category = CATEGORY_MAPPING.get(category_key)
    
    if not category:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", show_alert=True)
        return
    
    try:
        idea = await db.get_random_idea_by_category(category)
        if not idea:
            await callback.message.edit_text(
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –∏–¥–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é.",
                reply_markup=category_menu()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"üí° <b>{idea['title']}</b>\n\n"
            f"üìù {idea['description']}\n\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {idea['category']}",
            reply_markup=idea_action_keyboard(idea['id']),
            parse_mode='HTML'
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–¥–µ–∏: {e}", show_alert=True)

@router.callback_query(F.data.startswith("propose_idea_"))
async def propose_idea_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—É"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    idea_id = int(callback.data.replace("propose_idea_", ""))
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pair = await db.get_user_pair(user['id'])
        if not pair:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–¥–µ–µ
        idea = await db.get_idea_by_id(idea_id)
        if not idea:
            await callback.answer("–ò–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        proposal_id = await db.create_date_proposal(pair['id'], idea_id, user['id'])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
        partner_id = await db.get_partner_id(user['id'])
        partner = await db.get_user_by_id(partner_id)
        
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üí° <b>{idea['title']}</b>\n"
            f"üìù {idea['description']}\n\n"
            f"–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä {partner['name']} –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.",
            reply_markup=main_menu(),
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
        try:
            from aiogram import Bot
            from config import BOT_TOKEN
            from keyboards.inline import proposal_response_keyboard
            
            bot = Bot(token=BOT_TOKEN)
            
            await bot.send_message(
                partner['telegram_id'],
                f"üíå –£ –≤–∞—Å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è –æ—Ç {user['name']}!\n\n"
                f"üí° <b>{idea['title']}</b>\n"
                f"üìù {idea['description']}\n\n"
                f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {idea['category']}",
                reply_markup=proposal_response_keyboard(proposal_id),
                parse_mode='HTML'
            )
            await bot.session.close()
        except Exception:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
        
        await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üíï")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}", show_alert=True)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )
    await callback.answer()