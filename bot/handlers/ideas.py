from aiogram import Router, F
from aiogram.types import CallbackQuery

from database import db
from keyboards.inline import categories_menu, propose_idea_buttons, back_to_menu_button

router = Router()

@router.callback_query(F.data == "daily_idea")
async def daily_idea_handler(callback: CallbackQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–∏ –¥–Ω—è"""
    user = await db.get_user(callback.from_user.id)
    pair = await db.get_user_pair(user['id'])
    
    if not pair or not pair['user2_id']:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É!", show_alert=True)
        return
    
    idea = await db.get_random_idea()
    
    if not idea:
        await callback.message.edit_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–¥–µ–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=back_to_menu_button()
        )
        return
    
    await callback.message.edit_text(
        f"üí° –ò–¥–µ—è –¥–Ω—è:\n\n"
        f"**{idea['title']}**\n\n"
        f"{idea['description']}\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {idea['category']} üè∑Ô∏è",
        parse_mode="Markdown",
        reply_markup=propose_idea_buttons(idea['id'])
    )
    
    await callback.answer()

@router.callback_query(F.data == "propose_date")
async def propose_date_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏—è"""
    user = await db.get_user(callback.from_user.id)
    pair = await db.get_user_pair(user['id'])
    
    if not pair or not pair['user2_id']:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É!", show_alert=True)
        return
    
    categories = await db.get_all_categories()
    
    await callback.message.edit_text(
        "üíï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–¥–µ–π:",
        reply_markup=categories_menu(categories)
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("category_"))
async def category_ideas_handler(callback: CallbackQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_", 1)[1]
    
    ideas = await db.get_ideas_by_category(category)
    
    if not ideas:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∏–¥–µ–π!", show_alert=True)
        return
    
    # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    import random
    idea = random.choice(ideas)
    
    await callback.message.edit_text(
        f"üí° –ò–¥–µ—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n"
        f"**{idea['title']}**\n\n"
        f"{idea['description']}\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {idea['category']} üè∑Ô∏è",
        parse_mode="Markdown",
        reply_markup=propose_idea_buttons(idea['id'])
    )
    
    await callback.answer()

@router.callback_query(F.data == "random_idea")
async def random_idea_handler(callback: CallbackQuery):
    """–°–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è"""
    idea = await db.get_random_idea()
    
    if not idea:
        await callback.answer("–ò–¥–µ–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è:\n\n"
        f"**{idea['title']}**\n\n"
        f"{idea['description']}\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {idea['category']} üè∑Ô∏è",
        parse_mode="Markdown",
        reply_markup=propose_idea_buttons(idea['id'])
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("propose_"))
async def propose_idea_handler(callback: CallbackQuery):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–¥–µ–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—É"""
    idea_id = int(callback.data.split("_")[1])
    
    user = await db.get_user(callback.from_user.id)
    pair = await db.get_user_pair(user['id'])
    
    if not pair or not pair['user2_id']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—ã!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    proposal_id = await db.create_date_proposal(pair['id'], idea_id, user['id'])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–¥–µ–µ
    idea = await db.get_random_idea()  # –í—Ä–µ–º–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å get_idea_by_id
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
        f"–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Å–≤–∏–¥–∞–Ω–∏—è.\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞! üíï",
        reply_markup=back_to_menu_button()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
    partner_id = await db.get_partner_id(user['id'])
    partner = await db.get_user_by_id(partner_id)
    
    try:
        from main import bot
        from keyboards.inline import proposal_response_buttons
        
        await bot.send_message(
            partner['telegram_id'],
            f"üíï –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è!\n\n"
            f"–û—Ç: {user['name']}\n\n"
            f"**{idea['title']}**\n\n"
            f"{idea['description']}\n\n"
            f"–ß—Ç–æ —Å–∫–∞–∂–µ—Ç–µ?",
            parse_mode="Markdown",
            reply_markup=proposal_response_buttons(proposal_id)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚úÖ")