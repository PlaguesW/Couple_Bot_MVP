from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from database import db
from keyboards.inline import main_menu, category_menu, idea_action_keyboard, back_to_menu_button

router = Router()

@router.callback_query(F.data == "get_idea")
async def get_idea_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–∏ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è"""
    await state.clear()
    
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä—ã
    pair = await db.get_user_pair(user['id'])
    if not pair or not pair['user2_id']:
        await callback.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–¥–µ–π –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è:\n\n"
        "–ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!",
        reply_markup=category_menu()
    )
    
    await callback.answer()

@router.callback_query(F.data == "random_idea")
async def random_idea_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        idea = await db.get_random_idea()
        if not idea:
            await callback.answer("–ò–¥–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"üí° **{idea['title']}**\n\n"
            f"üìù {idea['description']}\n\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {idea['category'].title()}",
            parse_mode="Markdown",
            reply_markup=idea_action_keyboard(idea['id'])
        )
        
        await callback.answer("–í–æ—Ç –∏–¥–µ—è –¥–ª—è –≤–∞—Å! üí°")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–¥–µ–∏: {e}", show_alert=True)

@router.callback_query(F.data.startswith("category_"))
async def category_idea_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–¥–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    category = callback.data.replace("category_", "")
    
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        ideas = await db.get_ideas_by_category(category)
        if not ideas:
            await callback.answer(f"–ò–¥–µ–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∏–¥–µ—é –∏–∑ —Å–ø–∏—Å–∫–∞ (–æ–Ω–∏ —É–∂–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ)
        idea = ideas[0]
        
        await callback.message.edit_text(
            f"üí° **{idea['title']}**\n\n"
            f"üìù {idea['description']}\n\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {idea['category'].title()}",
            parse_mode="Markdown",
            reply_markup=idea_action_keyboard(idea['id'])
        )
        
        await callback.answer(f"–ò–¥–µ—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.title()}'! üí°")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–¥–µ–∏: {e}", show_alert=True)

@router.callback_query(F.data.startswith("propose_idea_"))
async def propose_idea_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—É"""
    idea_id = int(callback.data.replace("propose_idea_", ""))
    
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pair = await db.get_user_pair(user['id'])
    if not pair or not pair['user2_id']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!", show_alert=True)
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è
        proposal_id = await db.create_date_proposal(pair['id'], idea_id, user['id'])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–¥–µ–µ
        idea = await db.get_idea_by_id(idea_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
        partner_id = await db.get_partner_id(user['id'])
        partner = await db.get_user_by_id(partner_id)
        
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üí° **{idea['title']}**\n"
            f"üìù {idea['description']}\n\n"
            f"–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä {partner['name']} –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.",
            parse_mode="Markdown",
            reply_markup=back_to_menu_button()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
        try:
            from aiogram import Bot
            from config import BOT_TOKEN
            from keyboards.inline import proposal_response_keyboard
            
            bot = Bot(token=BOT_TOKEN)
            
            await bot.send_message(
                partner['telegram_id'],
                f"üíå –£ –≤–∞—Å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è –æ—Ç {user['name']}!\n\n"
                f"üí° **{idea['title']}**\n"
                f"üìù {idea['description']}\n\n"
                f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {idea['category'].title()}",
                parse_mode="Markdown",
                reply_markup=proposal_response_keyboard(proposal_id)
            )
            await bot.session.close()
        except Exception:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
        
        await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É! üíå")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}", show_alert=True)