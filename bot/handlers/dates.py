from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from database import db
from keyboards.inline import main_menu, back_to_menu_button, proposal_response_keyboard, pair_settings_menu, confirm_leave_pair_keyboard

router = Router()

@router.callback_query(F.data == "propose_date")
async def propose_date_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏—è"""
    await state.clear()
    
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä—ã
    pair = await db.get_user_pair(user['id'])
    if not pair or not pair['user2_id']:
        await callback.answer("–î–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É!", show_alert=True)
        return
    
    from keyboards.inline import category_menu
    
    await callback.message.edit_text(
        "üíå –í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ—é –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é!",
        reply_markup=category_menu()
    )
    
    await callback.answer()

@router.callback_query(F.data == "my_proposals")
async def my_proposals_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    await state.clear()
    
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä—ã
    pair = await db.get_user_pair(user['id'])
    if not pair or not pair['user2_id']:
        await callback.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É!", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        pending_proposals = await db.get_pending_proposals(pair['id'])
        
        if not pending_proposals:
            await callback.message.edit_text(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–≤–∏–¥–∞–Ω–∏–π.\n\n"
                "–ö–æ–≥–¥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º —Å–≤–∏–¥–∞–Ω–∏–µ, –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å!",
                reply_markup=back_to_menu_button()
            )
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        proposal = pending_proposals[0]
        
        await callback.message.edit_text(
            f"üíå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {proposal['proposer_name']}:\n\n"
            f"üí° **{proposal['title']}**\n"
            f"üìù {proposal['description']}\n\n"
            f"üìÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ: {proposal['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(pending_proposals)}",
            parse_mode="Markdown",
            reply_markup=proposal_response_keyboard(proposal['id'])
        )
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}", show_alert=True)

@router.callback_query(F.data.startswith("accept_"))
async def accept_proposal_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    proposal_id = int(callback.data.replace("accept_", ""))
    
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        success = await db.respond_to_proposal(proposal_id, 'accepted')
        
        if success:
            await callback.message.edit_text(
                "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ. üíï\n\n"
                "–ü—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ!",
                reply_markup=back_to_menu_button()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
                pair = await db.get_user_pair(user['id'])
                partner_id = await db.get_partner_id(user['id'])
                partner = await db.get_user_by_id(partner_id)
                
                from aiogram import Bot
                from config import BOT_TOKEN
                
                bot = Bot(token=BOT_TOKEN)
                
                await bot.send_message(
                    partner['telegram_id'],
                    f"üéâ {user['name']} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è!\n\n"
                    "–í—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É! üíï",
                    reply_markup=main_menu()
                )
                await bot.session.close()
            except Exception:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
            
            await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! üéâ")
        else:
            await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}", show_alert=True)

@router.callback_query(F.data == "pair_info")
async def show_pair_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    pair = await db.get_user_pair(user['id'])
    if not pair or not pair['user2_id']:
        await callback.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –ø–∞—Ä–µ", show_alert=True)
        return

    partner = await db.get_user_by_id(pair['user2_id'])

    await callback.message.edit_text(
        "üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ:\n\n"
        f"ü´Ç –í—ã: {user['name']} (@{user['username']})\n"
        f"‚ù§Ô∏è –ü–∞—Ä—Ç–Ω—ë—Ä: {partner['name']} (@{partner['username']})\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {pair['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=pair_settings_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "leave_pair")
async def leave_pair_confirm(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ –ø–∞—Ä—ã"""
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –ø–∞—Ä—É?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=confirm_leave_pair_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_leave_pair")
async def confirm_leave_pair(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–∞—Ä—ã"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    pair = await db.get_user_pair(user['id'])
    if not pair or not pair['user2_id']:
        await callback.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –ø–∞—Ä–µ", show_alert=True)
        return

    await db.leave_pair(user['id'])

    await callback.message.edit_text(
        "üíî –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –ø–∞—Ä—É.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.",
        reply_markup=main_menu()
    )

    # –û–ø–æ–≤–µ—â–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    try:
        from bot.config import BOT_TOKEN
        from aiogram import Bot

        bot = Bot(token=BOT_TOKEN)
        partner_id = await db.get_partner_id(user['id'])
        if partner_id:
            await bot.send_message(
                partner_id,
                "üíî –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–∫–∏–Ω—É–ª –ø–∞—Ä—É.\n\n"
                "–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä–µ."
            )
        await bot.session.close()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–∞—Ä—ã: {e}")

    await callback.answer()

@router.callback_query(F.data.startswith("decline_"))
async def decline_proposal_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    proposal_id = int(callback.data.replace("decline_", ""))
    
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        success = await db.respond_to_proposal(proposal_id, 'declined')
        
        if success:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n\n"
                "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å - –≤–ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! üòä",
                reply_markup=back_to_menu_button()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            try:
                partner_id = await db.get_partner_id(user['id'])
                partner = await db.get_user_by_id(partner_id)
                
                from aiogram import Bot
                from config import BOT_TOKEN
                
                bot = Bot(token=BOT_TOKEN)
                
                await bot.send_message(
                    partner['telegram_id'],
                    f"üòî {user['name']} –Ω–µ –≥–æ—Ç–æ–≤ –∫ —ç—Ç–æ–º—É —Å–≤–∏–¥–∞–Ω–∏—é —Å–µ–π—á–∞—Å.\n\n"
                    "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üòä",
                    reply_markup=main_menu()
                )
                await bot.session.close()
            except Exception:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
            
            await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        else:
            await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}", show_alert=True)

@router.callback_query(F.data == "date_history")
async def date_history_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–∏–¥–∞–Ω–∏–π"""
    await state.clear()
    
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä—ã
    pair = await db.get_user_pair(user['id'])
    if not pair or not pair['user2_id']:
        await callback.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É!", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–≤–∏–¥–∞–Ω–∏–π
        history = await db.get_date_history(pair['id'], limit=10)
        
        if not history:
            await callback.message.edit_text(
                "üìö –ò—Å—Ç–æ—Ä–∏—è —Å–≤–∏–¥–∞–Ω–∏–π –ø—É—Å—Ç–∞.\n\n"
                "–ö–æ–≥–¥–∞ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å!",
                reply_markup=back_to_menu_button()
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
        history_text = "üìö **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–≤–∏–¥–∞–Ω–∏–π:**\n\n"
        
        for item in history:
            status_emoji = "‚úÖ" if item['status'] == 'accepted' else "‚ùå"
            date_str = item['created_at'].strftime('%d.%m.%Y')
            
            history_text += (
                f"{status_emoji} **{item['title']}**\n"
                f"üë§ –ü—Ä–µ–¥–ª–æ–∂–∏–ª: {item['proposer_name']}\n"
                f"üìÖ {date_str}\n\n"
            )
        
        if len(history_text) > 4000:  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            history_text = history_text[:3900] + "...\n\n(–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)"
        
        await callback.message.edit_text(
            history_text,
            parse_mode="Markdown",
            reply_markup=back_to_menu_button()
        )
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}", show_alert=True)