from aiogram import Router, F
from aiogram.types import CallbackQuery

from database import db
from keyboards.inline import back_to_menu_button, main_menu

router = Router()

@router.callback_query(F.data.startswith("accept_"))
async def accept_proposal_handler(callback: CallbackQuery):
    """Accepting a date proposal"""
    proposal_id = int(callback.data.split("_")[1])
    
    success = await db.respond_to_proposal(proposal_id, 'accepted')
    
    if not success:
        await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!", show_alert=True)
        return
    
    user = await db.get_user(callback.from_user.id)
    pair = await db.get_user_pair(user['id'])
    partner_id = await db.get_partner_id(user['id'])
    partner = await db.get_user_by_id(partner_id)
    
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ñ–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ! üíï\n\n"
        f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å—Ö–æ–¥–∏—Ç–µ!",
        reply_markup=back_to_menu_button()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    try:
        from main import bot
        await bot.send_message(
            partner['telegram_id'],
            f"üéâ {user['name']} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è!\n\n"
            f"–í—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏! üíï",
            reply_markup=main_menu()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! üéâ")

@router.callback_query(F.data.startswith("reject_"))
async def reject_proposal_handler(callback: CallbackQuery):
    """Rejecting a date proposal"""
    proposal_id = int(callback.data.split("_")[1])
    
    success = await db.respond_to_proposal(proposal_id, 'rejected')
    
    if not success:
        await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!", show_alert=True)
        return
    
    user = await db.get_user(callback.from_user.id)
    pair = await db.get_user_pair(user['id'])
    partner_id = await db.get_partner_id(user['id'])
    partner = await db.get_user_by_id(partner_id)
    
    await callback.message.edit_text(
        f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n\n"
        f"–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞–π–¥–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ üòä",
        reply_markup=back_to_menu_button()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    try:
        from main import bot
        await bot.send_message(
            partner['telegram_id'],
            f"üòî {user['name']} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è.\n\n"
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ üí™",
            reply_markup=main_menu()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

@router.callback_query(F.data == "my_proposals")
async def my_proposals_handler(callback: CallbackQuery):
    """List of user's proposals"""
    user = await db.get_user(callback.from_user.id)
    pair = await db.get_user_pair(user['id'])
    
    if not pair or not pair['user2_id']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—ã!", show_alert=True)
        return
    
    proposals = await db.get_pending_proposals(pair['id'])
    
    if not proposals:
        await callback.message.edit_text(
            "üìù –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–≤–∏–¥–∞–Ω–∏–π.\n\n"
            "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –Ω–µ–≥–æ! üòä",
            reply_markup=back_to_menu_button()
        )
        await callback.answer()
        return
    
    # Group proposals by proposer
    my_proposals = [p for p in proposals if p['proposer_id'] == user['id']]
    partner_proposals = [p for p in proposals if p['proposer_id'] != user['id']]
    
    text = "üìù –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
    
    if partner_proposals:
        text += "üíå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞:\n"
        for proposal in partner_proposals[:3]:  # 3
            text += f"‚Ä¢ {proposal['title']}\n"
        if len(partner_proposals) > 3:
            text += f"... –∏ –µ—â–µ {len(partner_proposals) - 3}\n"
        text += "\n"
    
    if my_proposals:
        text += "üì§ –í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n"
        for proposal in my_proposals[:3]:  # 3
            text += f"‚Ä¢ {proposal['title']} (–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞)\n"
        if len(my_proposals) > 3:
            text += f"... –∏ –µ—â–µ {len(my_proposals) - 3}\n"
        text += "\n"
    
    text += f"–í—Å–µ–≥–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(proposals)}"
    
    await callback.message.edit_text(
        text,
        reply_markup=back_to_menu_button()
    )
    
    await callback.answer()

@router.callback_query(F.data == "date_history")
async def date_history_handler(callback: CallbackQuery):
    """History of dates for the pair"""
    user = await db.get_user(callback.from_user.id)
    pair = await db.get_user_pair(user['id'])
    
    if not pair or not pair['user2_id']:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—ã!", show_alert=True)
        return
    
    history = await db.get_date_history(pair['id'], limit=10)
    
    if not history:
        await callback.message.edit_text(
            "üìö –ò—Å—Ç–æ—Ä–∏—è —Å–≤–∏–¥–∞–Ω–∏–π\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–∏–¥–∞–Ω–∏–π.\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏–¥–µ–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É! üíï",
            reply_markup=back_to_menu_button()
        )
        await callback.answer()
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    accepted_count = len([h for h in history if h['status'] == 'accepted'])
    rejected_count = len([h for h in history if h['status'] == 'rejected'])
    
    text = f"üìö –ò—Å—Ç–æ—Ä–∏—è —Å–≤–∏–¥–∞–Ω–∏–π\n\n"
    text += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {accepted_count}\n"
    text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_count}\n\n"
    
    text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è:\n"
    
    for i, date in enumerate(history[:5], 1):
        status_emoji = "‚úÖ" if date['status'] == 'accepted' else "‚ùå"
        date_str = date['created_at'].strftime("%d.%m")
        text += f"{i}. {status_emoji} {date['title']} ({date_str})\n"
    
    if len(history) > 5:
        text += f"... –∏ –µ—â–µ {len(history) - 5} —Å–≤–∏–¥–∞–Ω–∏–π"
    
    await callback.message.edit_text(
        text,
        reply_markup=back_to_menu_button()
    )
    
    await callback.answer()