from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from database import db
from keyboards.inline import main_menu, pair_setup_menu, back_to_menu_button

router = Router()

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    user = await db.get_user(message.from_user.id)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        success = await db.add_user(
            telegram_id=message.from_user.id,
            name=message.from_user.full_name,
            username=message.from_user.username
        )
        if success:
            user = await db.get_user(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–∞
    pair = await db.get_user_pair(user['id'])
    
    if not pair:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–∞—Ä—ã
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user['name']}! üëã\n\n"
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–∏–¥–∞–Ω–∏–π!\n\n"
            "–ó–¥–µ—Å—å –≤—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üí° –ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π\n"
            "‚Ä¢ üíï –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ üìö –í–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –≤—Å—Ç—Ä–µ—á\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π:",
            reply_markup=pair_setup_menu()
        )
    elif not pair['user2_id']:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª –ø–∞—Ä—É, –Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user['name']}! üëã\n\n"
            f"–í–∞—à –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{pair['invite_code']}`\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä–µ.\n"
            "–ü–∞—Ä—Ç–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É:\n"
            f"`/join {pair['invite_code']}`",
            parse_mode="Markdown",
            reply_markup=back_to_menu_button()
        )
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è –ø–∞—Ä–∞
        partner_id = await db.get_partner_id(user['id'])
        partner = await db.get_user_by_id(partner_id)
        
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user['name']}! üëã\n\n"
            f"–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä: {partner['name']} üíï\n\n"
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            reply_markup=main_menu()
        )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    user = await db.get_user(callback.from_user.id)
    pair = await db.get_user_pair(user['id'])
    
    if not pair or not pair['user2_id']:
        await callback.message.edit_text(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π:",
            reply_markup=pair_setup_menu()
        )
    else:
        partner_id = await db.get_partner_id(user['id'])
        partner = await db.get_user_by_id(partner_id)
        
        await callback.message.edit_text(
            f"–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä: {partner['name']} üíï\n\n"
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            reply_markup=main_menu()
        )
    
    await callback.answer()