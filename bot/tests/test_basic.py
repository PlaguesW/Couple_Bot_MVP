import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_config_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    import config
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    assert hasattr(config, 'BOT_TOKEN')
    assert hasattr(config, 'DATABASE_URL')
    assert hasattr(config, 'DEBUG')
    assert hasattr(config, 'ADMIN_IDS')

def test_config_values():
    """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    import config
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    assert config.BOT_TOKEN is not None
    assert len(config.BOT_TOKEN) > 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
    assert config.DATABASE_URL is not None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ADMIN_IDS —ç—Ç–æ —Å–ø–∏—Å–æ–∫
    assert isinstance(config.ADMIN_IDS, list)

@pytest.mark.asyncio
async def test_database_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    from database import Database
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è
    assert db is not None
    assert hasattr(db, 'init_db')
    assert hasattr(db, 'create_tables')
    assert hasattr(db, 'connect')

def test_keyboard_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    from keyboards.inline import (
        main_menu, 
        pair_setup_menu, 
        get_pair_keyboard, 
        get_join_keyboard,
        back_to_menu_button
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    assert main_menu() is not None
    assert pair_setup_menu() is not None
    assert get_pair_keyboard() is not None
    assert get_join_keyboard() is not None
    assert back_to_menu_button() is not None

def test_handlers_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    try:
        from handlers import start, pairs, ideas, dates
        assert True  # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
    except ImportError as e:
        pytest.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {e}")

def test_category_emoji():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    from keyboards.inline import get_category_emoji
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    assert get_category_emoji('—Ä–æ–º–∞–Ω—Ç–∏–∫–∞') == 'üíï'
    assert get_category_emoji('–¥–æ–º') == 'üè†'
    assert get_category_emoji('–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å') == 'üèÉ'
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    assert get_category_emoji('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è') == '‚≠ê'